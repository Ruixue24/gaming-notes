# üß† Enemy Vertical Movement + Head Collision Trigger (Unity)

This guide explains how to create a vertically moving enemy within a defined area and add a collision detection system so that the enemy can be defeated when the player jumps on its head.

---

## üìÅ Setup Steps

### 1. Create Parent Object

- In the **Hierarchy**, right-click and choose:  
  `Create Empty` ‚Üí rename it to `Vertical_Enemy`.

### 2. Create Child Objects

- Under `Vertical_Enemy`, create three child objects:
  - `Enemy` ‚Äì the main enemy object
  - `PosA` ‚Äì the start point of movement
  - `PosB` ‚Äì the end point of movement

### 3. Add Head Collision Detection

- Under `Enemy`, create an empty object (e.g., `TopHitDetector`) and add a `Box Collider 2D`.
- Set the collider as **Trigger**, and adjust its size to cover the top area of the enemy.

### 4. Add Components to Enemy

- On the `Enemy` object, add the following components:
  - `Box Collider 2D`
  - A custom script: `VerticalMover.cs`
  - Drag the 'Enemy1.cs' in Enemy object

---

## üß© VerticalMover.cs

```csharp
using UnityEngine;

public class VerticalMover : MonoBehaviour
{
    public Transform posA, posB;
    public float speed = 2f;
    private Vector3 targetPos;

    void Start()
    {
        targetPos = posB.position;
    }

    void Update()
    {
        // Switch direction when reaching either point
        if (Vector2.Distance(transform.position, posA.position) < 0.05f)
            targetPos = posB.position;

        if (Vector2.Distance(transform.position, posB.position) < 0.05f)
            targetPos = posA.position;

        // Move towards target point
        transform.position = Vector3.MoveTowards(transform.position, targetPos, speed * Time.deltaTime);
    }
}
### 5. Configure verticalMover
- In the Inspector panel of Enemy, assign:
  - PosA --> the starting point
  - PosB --> the ending point

### 6. Save as Prefab
- Drag Vertical_Enemy into the project panel to create a Prefab for easy reuse.
